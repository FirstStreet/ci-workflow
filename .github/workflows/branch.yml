name: Build and Deploy Branch
on:
  workflow_call:
    inputs:
      appname:
        required: true
        type: string
      helm_name:
        required: true
        type: string
      dev_ns:
        required: true
        type: string
      stg_ns:
        required: true
        type: string
      prod_ns:
        required: true
        type: string
      use_ssm:
        default: true
        required: false
        type: boolean
      simple_deploy:
        default: false
        required: false
        type: boolean
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_NAME: ${{ inputs.appname }}
  HELM_NAME: ${{ inputs.helm_name }}
  DEV_NS: ${{ inputs.dev_ns }}
  STG_NS: ${{ inputs.stg_ns }}
  PROD_NS: ${{ inputs.prod_ns }}
  SIMPLE_DEPLOY: ${{ inputs.simple_deploy }}
  USE_SSM: ${{ inputs.use_ssm }}

jobs:
  Build:
    runs-on: [self-hosted, linux]
    permissions:
      contents: read
      packages: write
    outputs:
      appenv: ${{ steps.setappenv.outputs.env }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - id: setappenv
        run: |
          if [[ "$GITHUB_REF_NAME" == *"develop"* ]]; then
            echo "::set-output env=development"
          elif [[ "$GITHUB_REF_NAME" == *"master"* ]]; then
            echo "::set-output env=production"
          fi

  Deploy:
    needs: [Build]
    runs-on: self-hosted
    environment: ${{needs.Build.outputs.appenv}}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Prepare deployment
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

        run: |
          # Release .dev tags and `master` branch puches to develop
          if [[ "$GITHUB_REF_NAME" == *"develop"* ]]; then
            echo "VALUES=_k/${HELM_NAME}/values-dev.yaml" >> $GITHUB_ENV
            echo "CONF_ENV=dev" >> $GITHUB_ENV
            echo "NAMESPACE=${DEV_NS}" >> $GITHUB_ENV
          elif [[ "$GITHUB_REF_NAME" == *"master"* ]]; then
            # TODO: Switch to prod
            echo "VALUES=_k/${HELM_NAME}/values-dev.yaml" >> $GITHUB_ENV
            echo "CONF_ENV=dev" >> $GITHUB_ENV
            echo "NAMESPACE=${DEV_NS}" >> $GITHUB_ENV
          fi

      - uses: azure/setup-kubectl@v1
        with:
          version: "v1.22.4"

      - uses: actions/setup-node@v2
      - uses: azure/setup-helm@v1
        with:
          version: "v3.2.1" # default is latest stable

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy
        run: |
          aws eks update-kubeconfig --name fsf-prod
          if [[ $USE_SSM ]]; then
            helm plugin remove ssm || true
            helm plugin add https://github.com/seripap/helm-ssm || true
            helm ssm -f $VALUES
          fi

          sed -i "s/^appVersion:.*$/appVersion: \"$(git describe)\"/" _k/$APP_NAME/Chart.yaml

          if [[ $SIMPLE_DEPLOY ]]; then
            helm upgrade $APP_NAME _k/$APP_NAME --install --namespace $NAMESPACE --set app.image.tag=sha-$GITHUB_SHA -f $VALUES --wait --timeout 60s
          else
            helm upgrade $APP_NAME _k/$APP_NAME --install --namespace $NAMESPACE --set app.config=$CONF_ENV,volume.path=$CONF_ENV.conf,app.image.tag=sha-$GITHUB_SHA -f $VALUES --wait --timeout 60s --debug
          fi


